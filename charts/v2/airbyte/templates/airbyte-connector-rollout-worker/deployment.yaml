{{- if or (eq .Values.global.edition "community") (eq .Values.global.enterprise.connectorRolloutOptIn true)}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-connector-rollout-worker
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
    {{- if .Values.connectorRolloutWorker.extraLabels }}
    {{ toYaml (mergeOverwrite .Values.connectorRolloutWorker.extraLabels .Values.global.extraLabels) | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.connectorRolloutWorker.replicaCount }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
      {{- if .Values.connectorRolloutWorker.extraSelectorLabels }}
      {{ toYaml (mergeOverwrite .Values.connectorRolloutWorker.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 6 }}
      {{- end }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
        {{- if .Values.connectorRolloutWorker.extraSelectorLabels }}
        {{ toYaml (mergeOverwrite .Values.connectorRolloutWorker.extraSelectorLabels .Values.global.extraSelectorLabels) | nindent 8 }}
        {{- end }}
        {{- if .Values.connectorRolloutWorker.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.connectorRolloutWorker.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.connectorRolloutWorker.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.connectorRolloutWorker.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      automountServiceAccountToken: true
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
          {{- printf "- name: %s" .name | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.connectorRolloutWorker.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.connectorRolloutWorker.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.connectorRolloutWorker.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.connectorRolloutWorker.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.connectorRolloutWorker.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.connectorRolloutWorker.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.connectorRolloutWorker.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.connectorRolloutWorker.extraInitContainers | nindent 8 }}
      {{- end }}
      containers:
      - name: airbyte-connector-rollout-worker-container
        image: {{ include "imageUrl" (list .Values.connectorRolloutWorker.image $) }}
        imagePullPolicy: "{{ .Values.connectorRolloutWorker.image.pullPolicy }}"
        env:
        {{- if .Values.connectorRolloutWorker.debug.enabled }}
        - name: JAVA_TOOL_OPTIONS
          value: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=0.0.0.0:{{ .Values.connectorRolloutWorker.debug.remoteDebugPort }},server=y,suspend=n"
        {{- end }}
        {{- if eq .Values.global.deploymentMode "oss" }}
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_VERSION
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: INTERNAL_API_HOST
        - name: MICROMETER_METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: MICROMETER_METRICS_ENABLED
        - name: MICROMETER_METRICS_STATSD_FLAVOR
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: MICROMETER_METRICS_STATSD_FLAVOR
        - name: SEGMENT_WRITE_KEY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: SEGMENT_WRITE_KEY
        - name: STATSD_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: STATSD_HOST
        - name: STATSD_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: STATSD_PORT
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TRACKING_STRATEGY
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TEMPORAL_HOST
        - name: TEMPORAL_WORKER_PORTS
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: TEMPORAL_WORKER_PORTS
        - name: LOG_LEVEL
          value: "{{ .Values.connectorRolloutWorker.log.level }}"
        {{- end }}
        {{- if or (eq .Values.global.edition "pro") (eq .Values.global.edition "enterprise") }}
        - name: AIRBYTE_API_AUTH_HEADER_NAME
          value: "X-Airbyte-Auth"
        - name: AIRBYTE_API_AUTH_HEADER_VALUE
          value: "Internal worker"
        {{- else if and (eq .Values.global.deploymentMode "oss") .Values.global.auth.enabled }}
        # Self-Managed Enterprise and Community w/ auth enabled use the same auth header, just
        # splitting into two separate blocks for readability.
        - name: AIRBYTE_API_AUTH_HEADER_NAME
          value: "X-Airbyte-Auth"
        - name: AIRBYTE_API_AUTH_HEADER_VALUE
          value: "Internal worker"
        {{- end }}

        # Values from secret
        {{- if .Values.connectorRolloutWorker.secrets }}
        {{- range $k, $v := .Values.connectorRolloutWorker.secrets }}
        - name: {{ $k }}
          valueFrom:
            secretKeyRef:
              name: connector-rollout-worker-secrets
              key: {{ $k }}
        {{- end }}
        {{- end }}

        # Values from env
        {{- if or .Values.connectorRolloutWorker.env_vars .Values.global.env_vars }}
        {{- range $k, $v := mergeOverwrite .Values.connectorRolloutWorker.env_vars .Values.global.env_vars }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.connectorRolloutWorker.extraEnv }}
        {{- toYaml .Values.connectorRolloutWorker.extraEnv | nindent 8 }}
        {{- end }}

        {{- if .Values.connectorRolloutWorker.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: heartbeat
          initialDelaySeconds: {{ .Values.connectorRolloutWorker.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.connectorRolloutWorker.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.connectorRolloutWorker.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.connectorRolloutWorker.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.connectorRolloutWorker.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.connectorRolloutWorker.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: heartbeat
          initialDelaySeconds: {{ .Values.connectorRolloutWorker.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.connectorRolloutWorker.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.connectorRolloutWorker.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.connectorRolloutWorker.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.connectorRolloutWorker.readinessProbe.failureThreshold }}
        {{- end }}
        ports:
        {{- if .Values.connectorRolloutWorker.debug.enabled }}
        - name: debug
          containerPort: {{ .Values.connectorRolloutWorker.debug.remoteDebugPort }}
          protocol: TCP
        {{- end}}
        - name: heartbeat
          containerPort: 8016 # for heartbeat server

        {{- if .Values.connectorRolloutWorker.resources }}
        resources: {{- toYaml .Values.connectorRolloutWorker.resources | nindent 8 }}
        {{- end }}
        {{- if .Values.connectorRolloutWorker.containerSecurityContext }}
        securityContext: {{- toYaml .Values.connectorRolloutWorker.containerSecurityContext | nindent 8 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.connectorRolloutWorker.extraVolumeMounts }}
        {{ toYaml .Values.connectorRolloutWorker.extraVolumeMounts | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumeMounts }}
        {{ toYaml .Values.global.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.connectorRolloutWorker.extraContainers }}
      {{ toYaml .Values.connectorRolloutWorker.extraContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
      {{ toYaml .Values.global.extraContainers | nindent 6 }}
      {{- end }}
      securityContext: {{- toYaml .Values.connectorRolloutWorker.podSecurityContext | nindent 6 }}
      volumes:
      {{- if .Values.connectorRolloutWorker.extraVolumes }}
  {{ toYaml .Values.connectorRolloutWorker.extraVolumes | nindent 4 }}
  {{- end }}
{{- end }}
